{"version":3,"sources":["../../src/crawler/index.js"],"names":["startCrawling","urlToCrawl","parsedUrl","parse","getDom","then","parseHeaders","data","catch","console","error","e","Promise","resolve","reject","timer","protocol","start","get","res","rawData","on","chunk","stop","message","document","html","findDomNode","head","meta","findDomNodes","mobile","checkMetasForMobile","image","findContentByAttribute","title","name","description","metaTags","viewPort","parsedViewportAttribute","split","forEach","el","splitted","trim","checker","attributeName","attribute","nodes","j","length","nodeAttrs","attrs","theMetaTag","property","content","i","toLowerCase","value","domName","subDom","childNodes","nodeName","push"],"mappings":"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","file":"index.js","sourcesContent":["import url from 'url';\nimport http from 'http';\nimport https from 'https';\nimport parse5 from 'parse5';\nimport Timer from '../timer';\n\nexport const startCrawling = (urlToCrawl) => {\n  const parsedUrl = url.parse(urlToCrawl);\n  return getDom(parsedUrl)\n    .then(data => {\n      return parseHeaders(data)\n    })\n    .catch(e => console.error(e));\n}\n\nexport const getDom = (parsedUrl) => new Promise ((resolve, reject) => {\n  const timer = new Timer();\n  let protocol = http;\n  if(parsedUrl.protocol === 'https:') {\n    let protocol = https;\n  }\n  timer.start();\n  protocol.get(parsedUrl, (res) => {\n    let rawData = '';\n    res.on('data', (chunk) => rawData += chunk);\n    res.on('end', () => {\n      timer.stop();\n      try {\n        resolve(rawData);\n      } catch (e) {\n        reject(e.message);\n      }\n    });\n  })\n})\n\nconst parseHeaders = (data) => new Promise ((resolve, reject) => {\n  const document = parse5.parse(data);\n  /*\n    TODO: We should chain this into promises for easy error handling\n      findDomNode('html', document)\n      .then((html) => findDomNode('head', html))\n      .then((head) => findDomNode('meta', head))\n      .then( (...) )\n      .catch()\n  */\n  const html = findDomNode('html', document);\n  const head = findDomNode('head', html);\n  const meta = findDomNodes('meta', head)\n\n  // TODO: parse Stylesheets and check for media queries.\n  const mobile = checkMetasForMobile(meta); //TODO: Change this to a \"batch\" search\n  const image = findContentByAttribute('og:image','property', meta); //TODO: Change this to a \"batch\" search\n  const title = findContentByAttribute('og:title','property', meta); //TODO: Change this to a \"batch\" search\n  const name = findContentByAttribute('og:site_name','property', meta); //TODO: Change this to a \"batch\" search\n  const description = findContentByAttribute('description','name', meta); //TODO: Change this to a \"batch\" search\n  resolve({image, title, name, description, mobile})\n})\n\nconst checkMetasForMobile = (metaTags) => { //TODO: CHECK: We could use something like this: https://gist.github.com/shahariaazam/73c0644c6b2f2cba5ca2#file-google-mobile-friendliness-test-php/\n  //'https://www.googleapis.com/pagespeedonline/v3beta1/mobileReady?key='.$apiKey.'&url='.$url.'&strategy=mobile'\n  const viewPort = findContentByAttribute('viewport', 'name', metaTags);\n  const parsedViewportAttribute = {};\n  viewPort.split(',').forEach((el) => {\n    const splitted = el.split('=');\n    parsedViewportAttribute[splitted[0].trim()] = splitted[1].trim();\n  })\n  var checker = [\n    'width',\n    'device-width'\n  ];\n  if(parsedViewportAttribute[checker[0]] && parsedViewportAttribute[checker[1]]) { // TODO: This should have more depth\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// This goes tyhrough every meta-tag and extract a specific meta tag content\nconst findContentByAttribute = (attributeName, attribute, nodes) => {\n  var image = null;\n  for (let j = 0; j < nodes.length; j++) {\n    let nodeAttrs = nodes[j].attrs;\n    let theMetaTag = null;\n    var property = null;\n    var content = null;\n    for (let i = 0; i < nodeAttrs.length; i++) {\n      if(nodeAttrs[i].name.toLowerCase() === attribute){\n        property = nodeAttrs[i].value;\n      }\n      if(nodeAttrs[i].name.toLowerCase() === 'content'){\n        content = nodeAttrs[i].value;\n      }\n    }\n    if(property && property.toLowerCase() === attributeName) {\n      image = content\n      break;\n    }\n  }\n  return image;\n}\n\n\nconst findDomNode = (domName, subDom) => {\n  for (var i = 0; i < subDom.childNodes.length; i++) {\n    if(subDom.childNodes[i].nodeName === domName) {\n      return subDom.childNodes[i];\n      break;\n    }\n  }\n  return false;\n}\nconst findDomNodes = (domName, subDom) => {\n  const nodes = [];\n  for (var i = 0; i < subDom.childNodes.length; i++) {\n    if(subDom.childNodes[i].nodeName === domName) {\n      nodes.push(subDom.childNodes[i]);\n    }\n  }\n  return nodes;\n}\n\nexport default startCrawling;\n"]}