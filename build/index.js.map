{"version":3,"sources":["../src/index.js"],"names":["hostname","port","server","createServer","req","res","parsedUrl","parse","url","console","log","pathname","toLowerCase","query","start","then","data","writeHead","write","JSON","stringify","end","catch","errorData","msg","error","e","Promise","all","resolve","reject","mobile","title","description","image","process","env","NODE_ENV","listen","i"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,WAAW,WAAjB;AACA,IAAMC,OAAO,IAAb;;AAEA,IAAMC,SAAS,eAAKC,YAAL,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C,MAAIC,YAAY,cAAIC,KAAJ,CAAUH,IAAII,GAAd,EAAmB,IAAnB,CAAhB;AACAC,UAAQC,GAAR,CAAY,YAAZ;AACA,MAAIJ,UAAUK,QAAV,CAAmBC,WAAnB,OAAqC,MAArC,IAA+CN,UAAUO,KAAV,CAAgBL,GAAnE,EAAwE;AACtEC,YAAQC,GAAR,CAAY,+BAAZ;AACAI,UAAMR,SAAN,EACGS,IADH,CACQ,gBAAQ;AACZN,cAAQC,GAAR,CAAYM,IAAZ;AACAX,UAAIY,SAAJ,CAAc,GAAd,EAAmB,EAAC,gBAAgB,kBAAjB,EAAnB;AACAZ,UAAIa,KAAJ,CAAUC,KAAKC,SAAL,CAAeJ,IAAf,CAAV;AACAX,UAAIgB,GAAJ;AACD,KANH,EAOGC,KAPH,CAOS,aAAK;AACV,UAAMC,YAAY;AAChBC,aAAK,kCADW;AAEhBC,eAAOC;AAFS,OAAlB;AAIArB,UAAIY,SAAJ,CAAc,GAAd,EAAmB,EAAC,gBAAgB,kBAAjB,EAAnB;AACAZ,UAAIa,KAAJ,CAAUC,KAAKC,SAAL,CAAeG,SAAf,CAAV;AACAlB,UAAIgB,GAAJ;AACD,KAfH;AAgBD;AACF,CAtBc,CAAf;;AAwBA,IAAMP,QAAQ,SAARA,KAAQ,CAACR,SAAD;AAAA,SAAeqB,QAAQC,GAAR,CAAY,CACvC,4BAActB,UAAUO,KAAV,CAAgBL,GAA9B,CADuC,EAEvC,6BAAaF,UAAUO,KAAV,CAAgBL,GAA7B,CAFuC,CAAZ,EAG1BO,IAH0B,CAGrB,UAACC,IAAD;AAAA,WAAU,IAAIW,OAAJ,CAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACjDD,cAAQ;AACN,2BAAmBb,KAAK,CAAL,EAAQe,MADrB;AAEN,iBAASf,KAAK,CAAL,EAAQgB,KAFX;AAGN,uBAAehB,KAAK,CAAL,EAAQiB,WAHjB;AAIN,oBAAYjB,KAAK,CAAL,EAAQkB,KAJd;AAKN,oBAAYlB,KAAK,CAAL;AALN,OAAR;AAOD,KARiB,CAAV;AAAA,GAHqB,CAAf;AAAA,CAAd;;AAaA,IAAGmB,QAAQC,GAAR,CAAYC,QAAZ,KAAuB,aAA1B,EAAyC;AACvCvB,QAAM;AACJD,WAAO;AACLL,WAAK;AADA;AADH,GAAN,EAIGO,IAJH,CAIQ,gBAAQ;AACdN,YAAQC,GAAR,CAAYM,IAAZ;AACD,GAND;AAOD;;AAEDd,OAAOoC,MAAP,CAAcrC,IAAd,EAAoBD,QAApB,EAA8B,YAAM;AAClCS,UAAQC,GAAR,+BAAwCV,QAAxC,SAAoDC,IAApD;AACA,OAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3B9B,YAAQC,GAAR,CAAY,WAAZ;AACD;AACF,CALD","file":"index.js","sourcesContent":["import http from 'http';\nimport url from 'url';\nimport { startCrawling } from './crawler';\nimport { startLoading } from './nightmare';\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  let parsedUrl = url.parse(req.url, true);\n  console.log('WE GOT HIT')\n  if (parsedUrl.pathname.toLowerCase() === '/api' && parsedUrl.query.url) {\n    console.log('WE GOT HIT @ THE API ENDPOINT')\n    start(parsedUrl)\n      .then(data => {\n        console.log(data);\n        res.writeHead(200, {'Content-Type': 'application/json'})\n        res.write(JSON.stringify(data));\n        res.end();\n      })\n      .catch(e => {\n        const errorData = {\n          msg: 'We could not finish your request',\n          error: e,\n        };\n        res.writeHead(500, {'Content-Type': 'application/json'})\n        res.write(JSON.stringify(errorData));\n        res.end();\n      })\n  }\n});\n\nconst start = (parsedUrl) => Promise.all([\n  startCrawling(parsedUrl.query.url),\n  startLoading(parsedUrl.query.url)\n]).then((data) => new Promise((resolve, reject) => {\n  resolve({\n    \"mobileÂ­friendly\": data[0].mobile,\n    \"title\": data[0].title,\n    \"description\": data[0].description,\n    \"imageURL\": data[0].image,\n    \"loadTime\": data[1]\n  })\n}))\n\nif(process.env.NODE_ENV==='development') {\n  start({\n    query: {\n      url: 'http://www.lunametrics.com/blog/2017/02/02/unlimited-data-studio-reports/'\n    }\n  }).then(data => {\n    console.log(data)\n  })\n}\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n  for (var i = 0; i < 10; i++) {\n    console.log('---------')\n  }\n});\n"]}